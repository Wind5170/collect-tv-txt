name: 'Daily Job(test)'  # 工作流的名称 

on:
  schedule:
    - cron: '0 10 * * *'  # 每天 UTC 时间 10:00 触发（加上8小时后为 UTC+8 的 18:00）
  workflow_dispatch:  # 支持手动触发工作流
    inputs:
      environment:
        description: 'Environment to deploy to'  # 输入参数的描述
        required: true  # 该参数为必填
        default: 'production'  # 默认值为 'production'

jobs:
  run_job:  # 定义一个名为 run_job 的任务
    runs-on: ubuntu-latest  # 任务运行在最新的 Ubuntu 环境中
    
    steps:
    - name: Checkout repository  # 步骤1：检出代码仓库
      uses: actions/checkout@v2  # 使用 actions/checkout 操作检出代码
      
    - name: Set up Python  # 步骤2：设置 Python 环境
      uses: actions/setup-python@v2  # 使用 actions/setup-python 操作设置 Python
      with:
        python-version: '3.10'  # 指定 Python 版本为 3.10
        
    - name: Install dependencies  # 步骤3：安装依赖
      run: |  # 运行多行命令
        python -m pip install --upgrade pip  # 升级 pip
        pip install opencc-python-reimplemented  # 安装 opencc-python-reimplemented 包
        
    - name: Run Python script  # 步骤4：运行 Python 脚本
      run: python main-none.py  # 运行 main-none.py 脚本
      
    - name: Upload generated files  # 步骤5：上传生成的文件
      uses: actions/upload-artifact@v4  # 使用 actions/upload-artifact 操作上传文件
      with:
        name: generated-files  # 上传的文件命名为 generated-files
        path: |  # 指定要上传的文件路径
          merged_output.txt
          others_output.txt
          
    - name: Commit changes  # 步骤6：提交更改到 Git 仓库
      run: |  # 运行多行命令
          git config --local user.email "actions@github.com"  # 配置 Git 用户邮箱
          git config --local user.name "GitHub Actions"  # 配置 Git 用户名
          git add merged_output.txt merged_output.m3u merged_output_simple.txt merged_output_simple.m3u others_output.txt  # 添加文件到暂存区
          git add live.txt live.m3u live_lite.txt live_lite.m3u  # 添加更多文件到暂存区
          git commit -m ":tada:  AutoUpdate $(date +'%Y%m%d')"  # 提交更改，提交信息包含当前日期

          current_datetime=$(date +"%Y%m%d_%H%M%S")  # 获取当前日期和时间
          # 以下注释掉的代码是将文件归档到 history 目录并提交
          # cp merged_output.txt history/"${current_datetime}_merged_output.txt"
          # cp others_output.txt history/"${current_datetime}_others_output.txt"
          # git add history/"${current_datetime}_merged_output.txt"
          # git add history/"${current_datetime}_others_output.txt"
          # git commit -m "Archive file with timestamp"

          # 将归档文件打包为 zip 文件
          # zip_filename="history/${current_datetime}_archive_output.zip"  # 定义 zip 文件名
          # zip -j "${zip_filename}" merged_output.txt others_output.txt  # 将文件打包为 zip
          # git add "${zip_filename}"  # 添加 zip 文件到暂存区
          # git commit -m "Archive zipfile: ${current_datetime}"  # 提交 zip 文件
          
    - name: Push changes  # 步骤7：推送更改到远程仓库
      uses: ad-m/github-push-action@master  # 使用 ad-m/github-push-action 操作推送更改
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行身份验证
	
		
